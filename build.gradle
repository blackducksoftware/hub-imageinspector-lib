import com.bmuschko.gradle.docker.tasks.image.Dockerfile

buildscript {
    apply from: "https://raw.githubusercontent.com/blackducksoftware/integration-resources/master/gradle_common/buildscript-repositories.gradle", to: buildscript
    apply from: "https://raw.githubusercontent.com/blackducksoftware/integration-resources/master/gradle_common/buildscript-dependencies.gradle", to: buildscript

    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:1.0.11.RELEASE"
        classpath 'com.bmuschko:gradle-docker-plugin:6.4.0'
    }
}

plugins { id 'groovy' }

project.ext.moduleName = 'com.synopsys.integration.hub-imageinspector-lib'
project.ext.javaUseAutoModuleName = 'true'
project.ext.junitShowStandardStreams = 'true'

version = '13.0.6-SNAPSHOT'
description = 'A library for creating Black Duck Input Output (BDIO) representing the packages installed in a Linux Docker image'

apply plugin: "io.spring.dependency-management"
apply plugin: 'com.bmuschko.docker-remote-api'
apply plugin: 'com.synopsys.integration.library'

dependencyManagement {
    imports {
    	mavenBom 'io.spring.platform:platform-bom:Brussels-SR7'
        mavenBom 'com.fasterxml.jackson:jackson-bom:2.10.3'
    }
}

dependencies {
    api 'com.synopsys.integration:integration-bdio:22.1.1'
    api 'org.springframework.boot:spring-boot-starter'
    api 'org.springframework:spring-context'
    api 'org.apache.commons:commons-exec:1.3'

    testImplementation 'org.mockito:mockito-all:1.10.19'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

////////////////////////////////////////////////
// For integration tests: Build image tarfiles
task removeTestImage(type: Exec) {
    ignoreExitValue true
    commandLine "docker", "rmi", "blackducksoftware/centos_minus_vim_plus_bacula:1.0"
}

task removeTestBaseImage(type: Exec) {
    ignoreExitValue true
    commandLine "docker", "rmi", "centos:7.3.1611"
}

task createTestDockerfile(type: Dockerfile) {
	destFile = project.file("${buildDir}/images/test/centos_minus_vim_plus_bacula/Dockerfile")
	println "destFile: ${destFile}"
	from 'centos:7.3.1611'
	environmentVariable('LANG', 'en_US.UTF-8')
	
	runCommand 'rpm -e vim-minimal && \
        yum install -y bacula-director-5.2.13-23.1.el7 bacula-storage-5.2.13-23.1.el7 bacula-client-5.2.13-23.1.el7 \
        bacula-console-5.2.13-23.1.el7'
}

task buildTestDockerImage(type: Exec, dependsOn: [removeTestBaseImage, removeTestImage, createTestDockerfile]) {
	commandLine "docker", "build", "--no-cache", "--tag", "blackducksoftware/centos_minus_vim_plus_bacula:1.0", \
        "${buildDir}/images/test/centos_minus_vim_plus_bacula"
}

task buildTestDockerTarfile(type: Exec, dependsOn: buildTestDockerImage) {
    outputs.files file("${buildDir}/images/test/centos_minus_vim_plus_bacula.tar")
	commandLine "docker", "save", "-o", "${buildDir}/images/test/centos_minus_vim_plus_bacula.tar", \
        "blackducksoftware/centos_minus_vim_plus_bacula:1.0"
}

task createTestFile(type: Exec) {
    commandLine "touch", "${buildDir}/images/test/nopkgmgr/testfile.txt"
}

task createTestDockerfileNoPkgMgr(type: Dockerfile) {
    destFile = project.file("${buildDir}/images/test/nopkgmgr/Dockerfile")
    println "destFile: ${destFile}"
    from 'scratch'
    addFile('testfile.txt', '/')
}

task buildTestDockerImageNoPkgMgr(type: Exec, dependsOn: [createTestDockerfileNoPkgMgr, createTestFile]) {
    commandLine "docker", "build", "--no-cache", "--tag", "blackducksoftware/nopkgmgr:1.0", \
        "${buildDir}/images/test/nopkgmgr"
}

task buildTestDockerTarfileNoPkgMgr(type: Exec, dependsOn: buildTestDockerImageNoPkgMgr) {
    outputs.files file("${buildDir}/images/test/nopkgmgr.tar")
    commandLine "docker", "save", "-o", "${buildDir}/images/test/nopkgmgr.tar", \
        "blackducksoftware/nopkgmgr:1.0"
}

task pullAlpineLatest(type: Exec) {
    commandLine "docker", "pull", "alpine:latest"
}

task createImagesDir(type: Exec) {
	commandLine "mkdir", "-p", "${buildDir}/images/test"
}

task buildAlpineTestDockerTarfile(type: Exec, dependsOn: [createImagesDir, pullAlpineLatest]) {
    commandLine "docker", "save", "-o", "${buildDir}/images/test/alpine.tar", "alpine:latest"
}

task createAlpineDir(type: Exec) {
    commandLine "mkdir", "-p", "build/images/test/alpine/tarExtraction/alpine.tar"
}

task buildTestTarfiles(dependsOn: [buildTestDockerTarfile, buildAlpineTestDockerTarfile, buildTestDockerTarfileNoPkgMgr]) {}

task unTarAlpine(type: Exec, dependsOn: [buildTestTarfiles, createAlpineDir]) {
    workingDir "build/images/test/alpine/tarExtraction/alpine.tar"
    commandLine "tar", "xvf", "../../../alpine.tar"
}

testIntegration.dependsOn unTarAlpine
testAll.dependsOn unTarAlpine

// End of stuff for integration tests
////////////////////////////////////////////////
